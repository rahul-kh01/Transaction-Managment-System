# GCP Cloud Run Production Configuration
# Optimized for Google Cloud Platform deployment

spring:
  profiles:
    active: gcp
  
  # Database Configuration (Cloud SQL PostgreSQL)
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/posdb}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          batch_size: 25
          order_inserts: true
          order_updates: true
        batch_versioned_data: true
        connection:
          provider_disables_autocommit: true
  
  # Server Configuration
  server:
    port: ${PORT:8080}
    servlet:
      context-path: /
    compression:
      enabled: true
      mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
      min-response-size: 1024
  
  # Mail Configuration (Gmail SMTP)
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          ssl:
            trust: smtp.gmail.com
  
  # Security Configuration
  security:
    user:
      name: admin
      password: ${ADMIN_PASSWORD:admin123}
  
  # Actuator Configuration
  actuator:
    endpoints:
      web:
        exposure:
          include: health,info,metrics
        base-path: /actuator
    endpoint:
      health:
        show-details: when-authorized
        show-components: always
    health:
      db:
        enabled: true
      diskspace:
        enabled: true
        threshold: 100MB

# Logging Configuration
logging:
  level:
    root: INFO
    com.zosh: DEBUG
    org.springframework.security: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/pos-system.log
    max-size: 10MB
    max-history: 30

# Application Configuration
app:
  jwt:
    secret: ${JWT_SECRET:default-secret-key-change-this-in-production}
    expiration: ${JWT_EXPIRATION:86400000}
  
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
  
  frontend:
    reset-url: ${FRONTEND_RESET_URL:http://localhost:3000/auth/reset-password?token=}
  
  # GCP-specific optimizations
  gcp:
    project-id: ${GOOGLE_CLOUD_PROJECT:}
    region: ${GOOGLE_CLOUD_REGION:us-central1}
    service: ${GOOGLE_CLOUD_SERVICE:pos-backend}

# Management Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env
  endpoint:
    health:
      show-details: when-authorized
  info:
    env:
      enabled: true
    java:
      enabled: true
    build:
      enabled: true

# GCP Environment Detection
gcp:
  environment: production
  project: ${GOOGLE_CLOUD_PROJECT:}
  region: ${GOOGLE_CLOUD_REGION:us-central1}
  service: ${GOOGLE_CLOUD_SERVICE:pos-backend}
