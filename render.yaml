# ======================================================
# Render Blueprint for Complete POS System Deployment
# ======================================================
# This file defines infrastructure for deploying the complete
# POS system (backend + frontend + database) on Render
# 
# Usage:
# 1. Push this file to your repository root
# 2. Go to Render Dashboard ‚Üí New ‚Üí Blueprint
# 3. Connect your repository
# 4. Render will create all services automatically
#
# Documentation: https://render.com/docs/blueprint-spec
# ======================================================

services:
  # ======================================================
  # BACKEND API SERVICE (Spring Boot + Docker + Memory Optimized)
  # ======================================================
  - type: web
    name: pos-backend
    runtime: docker
    dockerfilePath: ./pos-backend/Dockerfile
    dockerContext: ./pos-backend
    plan: free  # Free tier with limitations (sleeps after inactivity)
    region: oregon  # Choose: oregon, frankfurt, singapore
    branch: main
    autoDeploy: true  # Auto-deploy on git push
    
    # Health check configuration
    healthCheckPath: /actuator/health
    
    # Memory optimization settings
    dockerfilePath: ./pos-backend/Dockerfile
    dockerContext: ./pos-backend
    
    # Environment variables for backend
    envVars:
      # ===== Database Configuration =====
      # Using external Neon database (set these in Render Dashboard)
      - key: DB_HOST
        sync: false
      - key: DB_PORT
        value: 5432
      - key: DB_NAME
        sync: false
      - key: DB_USERNAME
        sync: false
      - key: DB_PASSWORD
        sync: false
      - key: DB_SSL_MODE
        value: require
      - key: DB_POOL_SIZE
        value: 10
      - key: DB_MIN_IDLE
        value: 5
      
      # ===== JPA/Hibernate Configuration =====
      - key: JPA_DDL_AUTO
        value: update
      - key: JPA_SHOW_SQL
        value: false
      
      # ===== Server Configuration =====
      - key: SERVER_PORT
        value: 10000
      
      # ===== JWT Configuration =====
      # IMPORTANT: Set these in Render Dashboard after creation
      # Generate with: openssl rand -base64 64
      - key: JWT_SECRET
        sync: false  # Must be set manually in Render dashboard
      - key: JWT_EXPIRATION
        value: 86400000  # 24 hours in milliseconds
      
      # ===== Email Configuration (Gmail) =====
      # IMPORTANT: Set these in Render Dashboard
      # Get Gmail App Password from Google Account Security
      - key: MAIL_HOST
        value: smtp.gmail.com
      - key: MAIL_PORT
        value: 587
      - key: MAIL_USERNAME
        sync: false  # Set your Gmail address
      - key: MAIL_PASSWORD
        sync: false  # Set Gmail App Password
      
      # ===== Payment Gateway Configuration =====
      # Optional: Add in Render Dashboard if using payment features
      - key: RAZORPAY_API_KEY
        sync: false
      - key: RAZORPAY_API_SECRET
        sync: false
      - key: STRIPE_API_KEY
        sync: false
      
      # ===== CORS Configuration =====
      # Will be updated after frontend deployment
      - key: CORS_ALLOWED_ORIGINS
        value: http://localhost:5173
      
      # ===== Frontend URL for Password Reset =====
      # Will be updated after frontend deployment
      - key: FRONTEND_RESET_URL
        value: http://localhost:5173/auth/reset-password?token=
      
      # ===== Logging Configuration =====
      - key: LOG_LEVEL_ROOT
        value: INFO
      - key: LOG_LEVEL_APP
        value: DEBUG
      - key: LOG_LEVEL_SPRING
        value: INFO
      - key: LOG_LEVEL_SECURITY
        value: INFO
      - key: LOG_LEVEL_SQL
        value: WARN
      - key: LOG_LEVEL_SQL_TRACE
        value: WARN
      - key: LOG_FILE
        value: logs/pos-system.log
      
      # ===== DevTools Configuration =====
      - key: DEVTOOLS_ENABLED
        value: false
      
      # ===== Memory Optimization =====
      - key: JAVA_OPTS
        value: "-Xmx256m -Xms128m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
      - key: SPRING_PROFILES_ACTIVE
        value: production
      - key: SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_BATCH_SIZE
        value: 25
      - key: SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_INSERTS
        value: true
      - key: SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_UPDATES
        value: true
      - key: SPRING_JPA_PROPERTIES_HIBERNATE_BATCH_VERSIONED_DATA
        value: true

  # ======================================================
  # FRONTEND STATIC SITE (React + Vite + pnpm)
  # ======================================================
  - type: web
    name: pos-frontend
    runtime: static
    buildCommand: |
      # Install pnpm globally
      npm install -g pnpm@9.0.0
      # Navigate to frontend directory
      cd pos-frontend-vite
      # Install dependencies with pnpm
      pnpm install --frozen-lockfile
      # Run prebuild cleanup
      pnpm run clean
      # Build the application
      pnpm run build
    staticPublishPath: pos-frontend-vite/dist
    pullRequestPreviewsEnabled: true  # Enable PR previews
    plan: free  # Static sites are free on Render
    region: oregon  # Same as backend for better performance
    branch: main
    autoDeploy: true
    
    # Custom build settings
    buildFilter:
      paths:
        - pos-frontend-vite/**
    
    # Node.js version (aligned with .nvmrc)
    nodeVersion: 20.19.5
    
    # Frontend environment variables
    envVars:
      # ===== Package Manager Configuration =====
      - key: SKIP_INSTALL_DEPS
        value: true
      - key: NODE_ENV
        value: production
      
      # ===== Vite Configuration =====
      - key: VITE_BUILD_TARGET
        value: es2020
      - key: VITE_BUILD_MINIFY
        value: esbuild
      - key: VITE_BUILD_SOURCEMAP
        value: true
      
      # ===== API Configuration =====
      # IMPORTANT: Update this after backend is deployed
      # Use the backend service URL from Render
      - key: VITE_API_URL
        value: http://localhost:5000
      
      # ===== Application Configuration =====
      - key: VITE_APP_NAME
        value: Transaction Management System
      - key: VITE_APP_VERSION
        value: 1.0.0
      - key: VITE_ENABLE_ANALYTICS
        value: false
      - key: VITE_ENABLE_DEBUG
        value: false
      
      # ===== React Configuration =====
      - key: REACT_APP_NAME
        value: Transaction Management System
      - key: REACT_APP_VERSION
        value: 1.0.0
      
      # ===== Build Optimization =====
      - key: VITE_CHUNK_SIZE_WARNING_LIMIT
        value: 1000
      - key: VITE_BUILD_OUTPUT_DIR
        value: dist
      
      # ===== Development Tools (Disabled for Production) =====
      - key: VITE_DEVTOOLS_ENABLED
        value: false
      - key: VITE_FAST_REFRESH
        value: false
    
    # Headers for security and SPA routing
    headers:
      - path: /*
        name: X-Frame-Options
        value: DENY
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
      - path: /*
        name: X-XSS-Protection
        value: 1; mode=block
    
    # Routes for SPA (React Router)
    routes:
      - type: rewrite
        source: /*
        destination: /index.html

# ======================================================
# DATABASE CONFIGURATION
# ======================================================
# Note: This configuration uses an external Neon database instead of
# Render's built-in PostgreSQL service. All database credentials are
# set via environment variables in the Render Dashboard.
# 
# Benefits of external Neon database:
# - No 90-day expiration limit (unlike Render free PostgreSQL)
# - Better performance and reliability
# - More storage capacity
# - Managed backups and point-in-time recovery
#
# Database environment variables (set in Render Dashboard):
# - DB_HOST: Your Neon database host
# - DB_NAME: Database name (e.g., neondb)
# - DB_USERNAME: Database username
# - DB_PASSWORD: Database password
# - DB_PORT: 5432 (default PostgreSQL port)
# - DB_SSL_MODE: require (for secure connection)

# ======================================================
# POST-DEPLOYMENT INSTRUCTIONS
# ======================================================
# 
# ‚úÖ FIXES APPLIED:
# - Fixed HQL subquery error in UserRepository
# - Updated Dockerfile for Render (PORT 10000)
# - Configured external Neon database support
# - Added health check for faster startup
# - Aligned with Vite 7.1.12 + pnpm 9.0.0 + Node 20.19.5
# - Optimized build process with proper chunking
# - Added comprehensive environment variables
#
# üìã CHECKLIST AFTER DEPLOYMENT:
#
# 1. ‚úÖ SET DATABASE CREDENTIALS (in Render Dashboard):
#    Backend Service ‚Üí Environment ‚Üí Add:
#    - DB_HOST: Your Neon database host
#    - DB_NAME: Database name (e.g., neondb)
#    - DB_USERNAME: Database username
#    - DB_PASSWORD: Database password
#    (These MUST be set for the app to start)
#
# 2. ‚úÖ SET CRITICAL SECURITY VARIABLES:
#    - JWT_SECRET: Run `openssl rand -base64 64` and paste result
#    (This MUST be set for authentication to work)
#
# 3. ‚öôÔ∏è SET EMAIL CONFIGURATION (optional but recommended):
#    For Gmail:
#    - MAIL_HOST: smtp.gmail.com
#    - MAIL_PORT: 587
#    - MAIL_USERNAME: Your Gmail address
#    - MAIL_PASSWORD: Gmail App Password (from Google Account Security)
#    
#    For Mailtrap (testing):
#    - MAIL_HOST: sandbox.smtp.mailtrap.io
#    - MAIL_PORT: 2525
#    - MAIL_USERNAME: Your Mailtrap username
#    - MAIL_PASSWORD: Your Mailtrap password
#
# 4. üí≥ SET PAYMENT GATEWAYS (optional):
#    - RAZORPAY_API_KEY and RAZORPAY_API_SECRET
#    - STRIPE_API_KEY
#
# 5. üîó UPDATE URLS AFTER DEPLOYMENT:
#    a. Get your deployed URLs:
#       - Backend: https://your-backend.onrender.com
#       - Frontend: https://your-frontend.onrender.com
#    
#    b. Update Frontend environment variable:
#       - VITE_API_URL=https://your-backend.onrender.com
#    
#    c. Update Backend environment variables:
#       - CORS_ALLOWED_ORIGINS=https://your-frontend.onrender.com,http://localhost:5173
#       - FRONTEND_RESET_URL=https://your-frontend.onrender.com/auth/reset-password?token=
#
# 6. üîÑ REDEPLOY BOTH SERVICES:
#    - Frontend: To apply new VITE_API_URL
#    - Backend: To apply new CORS settings
#
# 7. ‚úÖ TEST THE DEPLOYMENT:
#    Backend health check:
#    curl https://your-backend.onrender.com/actuator/health
#    
#    Should return:
#    {
#      "status": "UP"
#    }
#    
#    Frontend:
#    - Open https://your-frontend.onrender.com
#    - Login with default credentials (see SAMPLE_DATA_CREDENTIALS.md)
#
# 8. üîí SECURITY CHECKLIST:
#    - ‚úÖ Change default admin password immediately
#    - ‚úÖ Review CORS settings for production
#    - ‚úÖ Rotate JWT_SECRET periodically
#    - ‚úÖ Use strong passwords for database
#    - ‚úÖ Enable HTTPS only (Render provides SSL automatically)
#    - ‚ö†Ô∏è Never commit .env files with secrets
#    - üìå Consider adding custom domain
#    - üìå Set up Render's DDoS protection
#
# 9. üìä MONITORING & MAINTENANCE:
#    - Set up Render metrics and alerts
#    - Monitor Neon database usage (free tier limits)
#    - Check application logs regularly
#    - Set up uptime monitoring (e.g., UptimeRobot)
#    - Review error logs weekly
#
# 10. üö® TROUBLESHOOTING:
#     If deployment fails, check:
#     - All required environment variables are set
#     - Database credentials are correct
#     - Neon database is accessible
#     - Check deployment logs for specific errors
#     - See RENDER_DEPLOYMENT_FIX.md for detailed troubleshooting
#
# 11. üéØ FRONTEND-SPECIFIC TROUBLESHOOTING:
#     If frontend build fails, check:
#     - Node.js version is 20.19.5 (matches .nvmrc)
#     - pnpm version is 9.0.0
#     - All dependencies are properly installed
#     - Vite build configuration is correct
#     - Check for missing react-icons imports
#     - Verify all environment variables are set
#
# ======================================================
# COST ESTIMATION (as of 2025)
# ======================================================
# 
# FREE TIER (This Configuration):
# - Backend Web Service: $0 (750 hours/month, sleeps after 15 min inactivity)
# - Frontend Static Site: $0 (100GB bandwidth/month)
# - PostgreSQL Database: $0 (256MB RAM, 1GB storage, expires in 90 days)
# Total: $0/month
#
# FREE TIER LIMITATIONS:
# - Backend spins down after 15 minutes of inactivity (30-60s to wake up)
# - Database expires after 90 days (will need to migrate or upgrade)
# - 750 hours/month limit on backend (enough for testing/development)
# - Limited resources (may be slow under load)
#
# PAID TIER (Production Recommended):
# - Backend (Starter): $7/month OR Standard: $25/month
# - Frontend (Static): $0 (always free)
# - Database (Starter): $7/month (1GB RAM, 10GB storage, no expiration)
# Total: $7-32/month depending on tier
#
# To Upgrade: Change plan from "free" to "starter" or "standard"
#
# ======================================================
